name: Update Pull Request Description

on:
  pull_request:
    types: [opened, closed]

permissions:
  pull-requests: write  # Allows the workflow to write to pull requests
  issues: read          # Allows the workflow to read issues (for comments)

jobs:
  update_description:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get Pull Request Comments
        id: get_comments
        run: |
          # Fetch comments from the pull request
          COMMENTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments)

          # Format comments
          FORMATTED_COMMENTS=""
          INDEX=1
          for row in $(echo "${COMMENTS}" | jq -r '.[] | "\(.body) \(.created_at) \(.user.login)"'); do
            COMMENT_BODY=$(echo $row | cut -d' ' -f1-)
            COMMENT_DATE=$(echo $row | cut -d' ' -f2)
            COMMENT_OWNER=$(echo $row | cut -d' ' -f3)
            FORMATTED_COMMENTS+="$INDEX) $COMMENT_BODY $COMMENT_DATE $COMMENT_OWNER\n"
            INDEX=$((INDEX + 1))
          done

          echo "Formatted Comments: $FORMATTED_COMMENTS"
          echo "::set-output name=formatted_comments::$FORMATTED_COMMENTS"

      - name: Set Pull Request Description
        if: github.event.action == 'opened'  # Only run this step if the PR is opened
        run: |
          # Extract details from the pull request
          OWNER="${{ github.actor }}"
          TITLE="${{ github.event.pull_request.title }}"
          USER_DESCRIPTION="${{ github.event.pull_request.body }}"
          BRANCH_NAME="${{ github.head_ref }}"
          
          # Extract ticket number and short description from the branch name
          TICKET_NUMBER=$(echo "$BRANCH_NAME" | cut -d'-' -f1)
          SHORT_DESCRIPTION=$(echo "$BRANCH_NAME" | cut -d'-' -f2)
          ENVIRONMENT=$(echo "$BRANCH_NAME" | cut -d'-' -f3)
          
          # Escape newlines in USER_DESCRIPTION
          USER_DESCRIPTION_ESCAPED=$(echo "$USER_DESCRIPTION" | sed ':a;N;$!ba;s/\n/\\n/g')
          
          # Create the new pull request body with a GUI-like format
          PR_BODY=$(jq -n \
            --arg owner "$OWNER" \
            --arg title "$TITLE" \
            --arg user_desc "$USER_DESCRIPTION_ESCAPED" \
            --arg short_desc "$SHORT_DESCRIPTION" \
            --arg ticket_num "$TICKET_NUMBER" \
            --arg env "$ENVIRONMENT" \
            --arg comments "${{ steps.get_comments.outputs.formatted_comments }}" \
            '{body: "## Pull Request Details\n\n**Pull Request Owner:** \($owner)\n\n**Pull Request Title:** \($title)\n\n**User Description:**\n\($user_desc)\n\n**Short Description:** \($short_desc)\n\n**Ticket Number:** \($ticket_num)\n\n**Environment:** \($env)\n\n**Comments:**\n\($comments)\n"}'
          )

          # Debugging: Print the PR_BODY to logs
          echo "PR_BODY: $PR_BODY"

          # Update the pull request body using GitHub API
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} \
            -d "$PR_BODY"
